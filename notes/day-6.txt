topics discussed or started:
---------------------------------------------
js Basics
JS internals:
Execution Context Object [variableObject, this, scopes]
variable and function hoisting
bind() method
arrow function
objects:
	object literal syntax and
	constructor function syntax

prototype-based programming

JS dynamic programming language:
	- it is no longer interpreted, rather compiled (during runtime - runtime compilation)


Compilations:
---------------------------------
Just-in-Time (JIT)
Ahead-of-Time (AOT)

JS execution environment:
------------------------------------------------
a. Browser based application (browser runtime)
b. Node js runtime

Broswer runtime:
----------------------------------------------------------------
JS engine: compiles and execute JS object

Chrome: v8 JS engine
Firefox: SpiderMonkey
Safari: JavaScriptCore (Nitro)
Edge: Chakra (rebuilt using Chroimum and uses V8 engine)
Opera: V8

Node uses module concept: [, ]
----------------------------------------
module: provides a property by the name exports


Modules in JS:
----------------------------------
a JS file is a module

a. export a module
-----------------------------
whichever members of a JS file, that you want to expose (can be called from other files), provide them through a JS object to the exports property
while doing this use some property names in the JS object to expose the JS file members

b. import a module
-----------------------------------
require(<path-without-extension>)

Module formats:
-------------------------------------------------------
a. Common JS
Format: Common JS format of module definition for exporting and importing
Export: module.exports={propName:member}
Import: require('path')

b. ES6 module format:
Export: export
Import: import {} from 'module-path'

c. AMD (asynchronous module definition) format:
---------------------------------------------------------

d. UMD (Universal Module definition) format:

e. IIFE(Immediately Invocable Function Expression - IIFE (IIFY))


Node JS module format:
--------------------------
default: Common JS

Module-loader:
--------------------------------------------
Node JS runtime automatically has a module loader which understands the Common JS module format (it understands the require functionalities and resolves the dependencies between the different modules)
after the dependencies are resolved, then Node js runtime loads the other linked JS files
and then will supply to the V8 engine for the final compilation and execution

But, in browser environment, there is no module-loader s/w
so browser will never undestand any modular JS code and can't resolve any dependency

Require JS<--module loader
	It expects the modules to be written in certian format: AMD, because it is optimized for AMD
	a. convert your module format in AMD
	b. write your code AMD
	c. if you are using Common JS format, then use r.js (Node adapter for Require JS)
SystemJS


conversion of new style JS code to old style JS code (understandable by any browser/node) --> Transpilation (Transpiler = Transformer+compiler)
Babel -- written using Node js

plugins: package for individual purpose ( => to function(){}, const -> var, let -> var)

preset: collection of plugins

--> creates package.json file with default values
>npm init --yes 
>npm i @babel/core @babel/cli @babel/preset-env @babel/plugin-transform-modules-amd --save-dev

@babel/core: core babel transpiler s/w
@babel/cli: to write comnmands from CLI (command line interface)
@babel/preset-env: it is a collection some plugins to transform your new JS features back to old JS
@babel/plugin-transform-modules-amd:  aplugion to convert your ES6 module format to AMD format 

>.\node_modules\.bin\babel <name of folder where source-codes are present> --out-dir <name of folder where output files will be stored>



